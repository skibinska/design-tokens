const comment = `
    // This file is autogenerated from an SVG file.
    // Do not edit this file directly; 
    // edit the SVG file and run "npm run build:svg"
    
    `;

// Function to find the viewBox attribute in the JSX tree
const findPropValue = (jsxElement, propName = 'viewBox', defaultValue = '0 0 24 24') => {
    if (
        jsxElement.openingElement &&
        jsxElement.openingElement.attributes
    ) {
        const attribute = jsxElement.openingElement.attributes.find(
            (attr) => attr.name && attr.name.name === propName
        );

        return attribute ? attribute.value.value : defaultValue;
    }

    return defaultValue;
};

// Function to replace the viewBox attribute in the JSX tree with a prop
const sanitizeJSX = (jsxElement) => {
    if (
        jsxElement.openingElement &&
        jsxElement.openingElement.attributes
    ) {
        jsxElement.openingElement.attributes = jsxElement.openingElement.attributes.map(
            (attr) => {
                if (attr.name && attr.name.name === 'viewBox') {
                    /**
                     * We need to replace a static viewBox attribute value (<svg viewBox="0 0 24 24" />)
                     * with a dynamic value that is passed as a prop (<svg viewBox={viewBox} />).
                     *
                     * To achieve this, we need to use JSXExpressionContainer to represent the curly braces around the expression.
                     */
                    return {
                        ...attr,
                        value: {
                            type: 'JSXExpressionContainer',
                            expression: {
                                type: 'Identifier',
                                name: 'viewBox'
                            }
                        }
                    };
                }

                return attr;
            }
        );
    }
    return jsxElement;
};


const template = (variables, { tpl }) => {
    const  { interfaces, componentName, jsx, exports } = variables;

    const viewBoxValue = findPropValue(jsx);
    const updatedJsx = sanitizeJSX(jsx);


    return tpl`
        ${comment}
        
        import React from 'react';
       
        ${interfaces};
        
        const ${componentName} = ({ viewBox = '${viewBoxValue}', ...props } : { viewBox?: string; } ) => (
          ${updatedJsx}
        );
        
        ${exports};
    `;
};

export default template;